<?php
/**
 * InstrumentIdentifierApi
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Flex API
 *
 * Simple PAN tokenization service
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Api;

use \CyberSource\ApiClient;
use \CyberSource\ApiException;
use \CyberSource\Configuration;
use \CyberSource\ObjectSerializer;

/**
 * InstrumentIdentifierApi Class Doc Comment
 *
 * @category Class
 * @package  CyberSource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InstrumentIdentifierApi
{
    /**
     * API Client
     *
     * @var \CyberSource\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \CyberSource\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\CyberSource\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \CyberSource\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \CyberSource\ApiClient $apiClient set the API client
     *
     * @return InstrumentIdentifierApi
     */
    public function setApiClient(\CyberSource\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation instrumentidentifiersPost
     *
     * Create an Instrument Identifier
     *
     * @param string $profileId The id of a profile containing user specific TMS configuration. (required)
     * @param \CyberSource\Model\Body $body Please specify either a Card or Bank Account. (optional)
     * @throws \CyberSource\ApiException on non-2xx response
     * @return \CyberSource\Model\InlineResponse2007
     */
    public function instrumentidentifiersPost($profileId, $body = null)
    {
        list($response, $statusCode, $httpHeader) = $this->instrumentidentifiersPostWithHttpInfo($profileId, $body);
        return [$response, $statusCode, $httpHeader];
    }

    /**
     * Operation instrumentidentifiersPostWithHttpInfo
     *
     * Create an Instrument Identifier
     *
     * @param string $profileId The id of a profile containing user specific TMS configuration. (required)
     * @param \CyberSource\Model\Body $body Please specify either a Card or Bank Account. (optional)
     * @throws \CyberSource\ApiException on non-2xx response
     * @return array of \CyberSource\Model\InlineResponse2007, HTTP status code, HTTP response headers (array of strings)
     */
    public function instrumentidentifiersPostWithHttpInfo($profileId, $body = null)
    {
        // verify the required parameter 'profileId' is set
        /*if ($profileId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $profileId when calling instrumentidentifiersPost');
        }
        if (($profileId > 36)) {
            throw new \InvalidArgumentException('invalid value for "$profileId" when calling InstrumentIdentifierApi.instrumentidentifiersPost, must be smaller than or equal to 36.');
        }
        if (($profileId < 36)) {
            throw new \InvalidArgumentException('invalid value for "$profileId" when calling InstrumentIdentifierApi.instrumentidentifiersPost, must be bigger than or equal to 36.');
        }
        */
        // parse inputs
        $resourcePath = "/tms/v1/instrumentidentifiers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($profileId !== null) {
            $headerParams['profile-id'] = $this->apiClient->getSerializer()->toHeaderValue($profileId);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CyberSource\Model\InlineResponse2007',
                '/tms/v1/instrumentidentifiers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CyberSource\Model\InlineResponse2007', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse2007', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse2007', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse4006[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse4006[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 424:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse4006[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse4006[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation instrumentidentifiersTokenIdDelete
     *
     * Delete an Instrument Identifier
     *
     * @param string $profileId The id of a profile containing user specific TMS configuration. (required)
     * @param string $tokenId The TokenId of an Instrument Identifier. (required)
     * @throws \CyberSource\ApiException on non-2xx response
     * @return void
     */
    public function instrumentidentifiersTokenIdDelete($profileId, $tokenId)
    {
        list($response, $statusCode, $httpHeader) = $this->instrumentidentifiersTokenIdDeleteWithHttpInfo($profileId, $tokenId);
        return [$response, $statusCode, $httpHeader];
    }

    /**
     * Operation instrumentidentifiersTokenIdDeleteWithHttpInfo
     *
     * Delete an Instrument Identifier
     *
     * @param string $profileId The id of a profile containing user specific TMS configuration. (required)
     * @param string $tokenId The TokenId of an Instrument Identifier. (required)
     * @throws \CyberSource\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function instrumentidentifiersTokenIdDeleteWithHttpInfo($profileId, $tokenId)
    {
        // verify the required parameter 'profileId' is set
        /*if ($profileId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $profileId when calling instrumentidentifiersTokenIdDelete');
        }
        if (($profileId > 36)) {
            throw new \InvalidArgumentException('invalid value for "$profileId" when calling InstrumentIdentifierApi.instrumentidentifiersTokenIdDelete, must be smaller than or equal to 36.');
        }
        if (($profileId < 36)) {
            throw new \InvalidArgumentException('invalid value for "$profileId" when calling InstrumentIdentifierApi.instrumentidentifiersTokenIdDelete, must be bigger than or equal to 36.');
        }

        // verify the required parameter 'tokenId' is set
        if ($tokenId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tokenId when calling instrumentidentifiersTokenIdDelete');
        }
        if (($tokenId > 32)) {
            throw new \InvalidArgumentException('invalid value for "$tokenId" when calling InstrumentIdentifierApi.instrumentidentifiersTokenIdDelete, must be smaller than or equal to 32.');
        }
        if (($tokenId < 16)) {
            throw new \InvalidArgumentException('invalid value for "$tokenId" when calling InstrumentIdentifierApi.instrumentidentifiersTokenIdDelete, must be bigger than or equal to 16.');
        }*/

        // parse inputs
        $resourcePath = "/tms/v1/instrumentidentifiers/{tokenId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($profileId !== null) {
            $headerParams['profile-id'] = $this->apiClient->getSerializer()->toHeaderValue($profileId);
        }
        // path params
        if ($tokenId !== null) {
            $resourcePath = str_replace(
                "{" . "tokenId" . "}",
                $this->apiClient->getSerializer()->toPathValue($tokenId),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/tms/v1/instrumentidentifiers/{tokenId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse4006[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse4006[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse409', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse4006[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 424:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse4006[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse4006[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation instrumentidentifiersTokenIdGet
     *
     * Retrieve an Instrument Identifier
     *
     * @param string $profileId The id of a profile containing user specific TMS configuration. (required)
     * @param string $tokenId The TokenId of an Instrument Identifier. (required)
     * @throws \CyberSource\ApiException on non-2xx response
     * @return \CyberSource\Model\InlineResponse2007
     */
    public function instrumentidentifiersTokenIdGet($profileId, $tokenId)
    {
        list($response, $statusCode, $httpHeader) = $this->instrumentidentifiersTokenIdGetWithHttpInfo($profileId, $tokenId);
        return [$response, $statusCode, $httpHeader];
    }

    /**
     * Operation instrumentidentifiersTokenIdGetWithHttpInfo
     *
     * Retrieve an Instrument Identifier
     *
     * @param string $profileId The id of a profile containing user specific TMS configuration. (required)
     * @param string $tokenId The TokenId of an Instrument Identifier. (required)
     * @throws \CyberSource\ApiException on non-2xx response
     * @return array of \CyberSource\Model\InlineResponse2007, HTTP status code, HTTP response headers (array of strings)
     */
    public function instrumentidentifiersTokenIdGetWithHttpInfo($profileId, $tokenId)
    {
        // verify the required parameter 'profileId' is set
        /*if ($profileId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $profileId when calling instrumentidentifiersTokenIdGet');
        }
        if (($profileId > 36)) {
            throw new \InvalidArgumentException('invalid value for "$profileId" when calling InstrumentIdentifierApi.instrumentidentifiersTokenIdGet, must be smaller than or equal to 36.');
        }
        if (($profileId < 36)) {
            throw new \InvalidArgumentException('invalid value for "$profileId" when calling InstrumentIdentifierApi.instrumentidentifiersTokenIdGet, must be bigger than or equal to 36.');
        } */

        // verify the required parameter 'tokenId' is set
        /*if ($tokenId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tokenId when calling instrumentidentifiersTokenIdGet');
        }
        if (($tokenId > 32)) {
            throw new \InvalidArgumentException('invalid value for "$tokenId" when calling InstrumentIdentifierApi.instrumentidentifiersTokenIdGet, must be smaller than or equal to 32.');
        }
        if (($tokenId < 16)) {
            throw new \InvalidArgumentException('invalid value for "$tokenId" when calling InstrumentIdentifierApi.instrumentidentifiersTokenIdGet, must be bigger than or equal to 16.');
        }*/

        // parse inputs
        $resourcePath = "/tms/v1/instrumentidentifiers/{tokenId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/hal+json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($profileId !== null) {
            $headerParams['profile-id'] = $this->apiClient->getSerializer()->toHeaderValue($profileId);
        }
        // path params
        if ($tokenId !== null) {
            $resourcePath = str_replace(
                "{" . "tokenId" . "}",
                $this->apiClient->getSerializer()->toPathValue($tokenId),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CyberSource\Model\InlineResponse2007',
                '/tms/v1/instrumentidentifiers/{tokenId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CyberSource\Model\InlineResponse2007', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse2007', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse4006[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse4006[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse4006[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse4006[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 424:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse4006[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse4006[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation instrumentidentifiersTokenIdPatch
     *
     * Update a Instrument Identifier
     *
     * @param string $profileId The id of a profile containing user specific TMS configuration. (required)
     * @param string $tokenId The TokenId of an Instrument Identifier (required)
     * @param \CyberSource\Model\Body1 $body Please specify the previous transaction Id to update. (required)
     * @throws \CyberSource\ApiException on non-2xx response
     * @return \CyberSource\Model\InlineResponse2007
     */
    public function instrumentidentifiersTokenIdPatch($profileId, $tokenId, $body)
    {
        list($response, $statusCode, $httpHeader) = $this->instrumentidentifiersTokenIdPatchWithHttpInfo($profileId, $tokenId, $body);
        return [$response, $statusCode, $httpHeader];
    }

    /**
     * Operation instrumentidentifiersTokenIdPatchWithHttpInfo
     *
     * Update a Instrument Identifier
     *
     * @param string $profileId The id of a profile containing user specific TMS configuration. (required)
     * @param string $tokenId The TokenId of an Instrument Identifier (required)
     * @param \CyberSource\Model\Body1 $body Please specify the previous transaction Id to update. (required)
     * @throws \CyberSource\ApiException on non-2xx response
     * @return array of \CyberSource\Model\InlineResponse2007, HTTP status code, HTTP response headers (array of strings)
     */
    public function instrumentidentifiersTokenIdPatchWithHttpInfo($profileId, $tokenId, $body)
    {
        // verify the required parameter 'profileId' is set
        /*if ($profileId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $profileId when calling instrumentidentifiersTokenIdPatch');
        }
        if (($profileId > 36)) {
            throw new \InvalidArgumentException('invalid value for "$profileId" when calling InstrumentIdentifierApi.instrumentidentifiersTokenIdPatch, must be smaller than or equal to 36.');
        }
        if (($profileId < 36)) {
            throw new \InvalidArgumentException('invalid value for "$profileId" when calling InstrumentIdentifierApi.instrumentidentifiersTokenIdPatch, must be bigger than or equal to 36.');
        }

        // verify the required parameter 'tokenId' is set
        if ($tokenId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tokenId when calling instrumentidentifiersTokenIdPatch');
        }
        if (($tokenId > 32)) {
            throw new \InvalidArgumentException('invalid value for "$tokenId" when calling InstrumentIdentifierApi.instrumentidentifiersTokenIdPatch, must be smaller than or equal to 32.');
        }
        if (($tokenId < 16)) {
            throw new \InvalidArgumentException('invalid value for "$tokenId" when calling InstrumentIdentifierApi.instrumentidentifiersTokenIdPatch, must be bigger than or equal to 16.');
        }
        */
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling instrumentidentifiersTokenIdPatch');
        }
        // parse inputs
        $resourcePath = "/tms/v1/instrumentidentifiers/{tokenId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($profileId !== null) {
            $headerParams['profile-id'] = $this->apiClient->getSerializer()->toHeaderValue($profileId);
        }
        // path params
        if ($tokenId !== null) {
            $resourcePath = str_replace(
                "{" . "tokenId" . "}",
                $this->apiClient->getSerializer()->toPathValue($tokenId),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CyberSource\Model\InlineResponse2007',
                '/tms/v1/instrumentidentifiers/{tokenId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CyberSource\Model\InlineResponse2007', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse2007', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse4006[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse4006[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse4006[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse4006[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 424:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse4006[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse4006[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation instrumentidentifiersTokenIdPaymentinstrumentsGet
     *
     * Retrieve all Payment Instruments associated with an Instrument Identifier
     *
     * @param string $profileId The id of a profile containing user specific TMS configuration. (required)
     * @param string $tokenId The TokenId of an Instrument Identifier. (required)
     * @param string $offset Starting Payment Instrument record in zero-based dataset that should be returned as the first object in the array. Default is 0. (optional)
     * @param string $limit The maximum number of Payment Instruments that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100. (optional, default to 20)
     * @throws \CyberSource\ApiException on non-2xx response
     * @return \CyberSource\Model\InlineResponse2008
     */
    public function instrumentidentifiersTokenIdPaymentinstrumentsGet($profileId, $tokenId, $offset = null, $limit = '20')
    {
        list($response, $statusCode, $httpHeader) = $this->instrumentidentifiersTokenIdPaymentinstrumentsGetWithHttpInfo($profileId, $tokenId, $offset, $limit);
        return [$response, $statusCode, $httpHeader];
    }

    /**
     * Operation instrumentidentifiersTokenIdPaymentinstrumentsGetWithHttpInfo
     *
     * Retrieve all Payment Instruments associated with an Instrument Identifier
     *
     * @param string $profileId The id of a profile containing user specific TMS configuration. (required)
     * @param string $tokenId The TokenId of an Instrument Identifier. (required)
     * @param string $offset Starting Payment Instrument record in zero-based dataset that should be returned as the first object in the array. Default is 0. (optional)
     * @param string $limit The maximum number of Payment Instruments that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100. (optional, default to 20)
     * @throws \CyberSource\ApiException on non-2xx response
     * @return array of \CyberSource\Model\InlineResponse2008, HTTP status code, HTTP response headers (array of strings)
     */
    public function instrumentidentifiersTokenIdPaymentinstrumentsGetWithHttpInfo($profileId, $tokenId, $offset = null, $limit = '20')
    {
        // verify the required parameter 'profileId' is set
        /*if ($profileId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $profileId when calling instrumentidentifiersTokenIdPaymentinstrumentsGet');
        }
        if (($profileId > 36)) {
            throw new \InvalidArgumentException('invalid value for "$profileId" when calling InstrumentIdentifierApi.instrumentidentifiersTokenIdPaymentinstrumentsGet, must be smaller than or equal to 36.');
        }
        if (($profileId < 36)) {
            throw new \InvalidArgumentException('invalid value for "$profileId" when calling InstrumentIdentifierApi.instrumentidentifiersTokenIdPaymentinstrumentsGet, must be bigger than or equal to 36.');
        }

        // verify the required parameter 'tokenId' is set
        if ($tokenId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tokenId when calling instrumentidentifiersTokenIdPaymentinstrumentsGet');
        }
        if (($tokenId > 32)) {
            throw new \InvalidArgumentException('invalid value for "$tokenId" when calling InstrumentIdentifierApi.instrumentidentifiersTokenIdPaymentinstrumentsGet, must be smaller than or equal to 32.');
        }
        if (($tokenId < 16)) {
            throw new \InvalidArgumentException('invalid value for "$tokenId" when calling InstrumentIdentifierApi.instrumentidentifiersTokenIdPaymentinstrumentsGet, must be bigger than or equal to 16.');
        }

        if (!is_null($offset) && ($offset < 0)) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling InstrumentIdentifierApi.instrumentidentifiersTokenIdPaymentinstrumentsGet, must be bigger than or equal to 0.');
        }

        if (!is_null($limit) && ($limit > 100)) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling InstrumentIdentifierApi.instrumentidentifiersTokenIdPaymentinstrumentsGet, must be smaller than or equal to 100.');
        }
        if (!is_null($limit) && ($limit < 1)) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling InstrumentIdentifierApi.instrumentidentifiersTokenIdPaymentinstrumentsGet, must be bigger than or equal to 1.');
        }*/

        // parse inputs
        $resourcePath = "/tms/v1/instrumentidentifiers/{tokenId}/paymentinstruments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        /*if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }*/
        // header params
        if ($profileId !== null) {
            $headerParams['profile-id'] = $this->apiClient->getSerializer()->toHeaderValue($profileId);
        }
        // path params
        if ($tokenId !== null) {
            $resourcePath = str_replace(
                "{" . "tokenId" . "}",
                $this->apiClient->getSerializer()->toPathValue($tokenId),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CyberSource\Model\InlineResponse2008',
                '/tms/v1/instrumentidentifiers/{tokenId}/paymentinstruments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CyberSource\Model\InlineResponse2008', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse2008', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse4006[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse4006[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse4006[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse4006[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 424:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse4006[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse4006[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
