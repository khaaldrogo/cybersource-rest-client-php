<?php
/**
 * V2paymentsProcessingInformationAuthorizationOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Flex API
 *
 * Simple PAN tokenization service
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * V2paymentsProcessingInformationAuthorizationOptions Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class V2paymentsProcessingInformationAuthorizationOptions implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'v2payments_processingInformation_authorizationOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'authType' => 'string',
        'verbalAuthCode' => 'string',
        'verbalAuthTransactionId' => 'string',
        'authIndicator' => 'string',
        'partialAuthIndicator' => 'bool',
        'balanceInquiry' => 'bool',
        'ignoreAvsResult' => 'bool',
        'declineAvsFlags' => 'string[]',
        'ignoreCvResult' => 'bool',
        'initiator' => '\CyberSource\Model\V2paymentsProcessingInformationAuthorizationOptionsInitiator'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'authType' => null,
        'verbalAuthCode' => null,
        'verbalAuthTransactionId' => null,
        'authIndicator' => null,
        'partialAuthIndicator' => null,
        'balanceInquiry' => null,
        'ignoreAvsResult' => null,
        'declineAvsFlags' => null,
        'ignoreCvResult' => null,
        'initiator' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'authType' => 'authType',
        'verbalAuthCode' => 'verbalAuthCode',
        'verbalAuthTransactionId' => 'verbalAuthTransactionId',
        'authIndicator' => 'authIndicator',
        'partialAuthIndicator' => 'partialAuthIndicator',
        'balanceInquiry' => 'balanceInquiry',
        'ignoreAvsResult' => 'ignoreAvsResult',
        'declineAvsFlags' => 'declineAvsFlags',
        'ignoreCvResult' => 'ignoreCvResult',
        'initiator' => 'initiator'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'authType' => 'setAuthType',
        'verbalAuthCode' => 'setVerbalAuthCode',
        'verbalAuthTransactionId' => 'setVerbalAuthTransactionId',
        'authIndicator' => 'setAuthIndicator',
        'partialAuthIndicator' => 'setPartialAuthIndicator',
        'balanceInquiry' => 'setBalanceInquiry',
        'ignoreAvsResult' => 'setIgnoreAvsResult',
        'declineAvsFlags' => 'setDeclineAvsFlags',
        'ignoreCvResult' => 'setIgnoreCvResult',
        'initiator' => 'setInitiator'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'authType' => 'getAuthType',
        'verbalAuthCode' => 'getVerbalAuthCode',
        'verbalAuthTransactionId' => 'getVerbalAuthTransactionId',
        'authIndicator' => 'getAuthIndicator',
        'partialAuthIndicator' => 'getPartialAuthIndicator',
        'balanceInquiry' => 'getBalanceInquiry',
        'ignoreAvsResult' => 'getIgnoreAvsResult',
        'declineAvsFlags' => 'getDeclineAvsFlags',
        'ignoreCvResult' => 'getIgnoreCvResult',
        'initiator' => 'getInitiator'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const DECLINE_AVS_FLAGS_D = 'D';
    const DECLINE_AVS_FLAGS_A = 'A';
    const DECLINE_AVS_FLAGS_V = 'V';
    const DECLINE_AVS_FLAGS_S = 'S';
    const DECLINE_AVS_FLAGS_N = 'N';
    const DECLINE_AVS_FLAGS_O = 'O';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getDeclineAvsFlagsAllowableValues()
    {
        return [
            self::DECLINE_AVS_FLAGS_D,
            self::DECLINE_AVS_FLAGS_A,
            self::DECLINE_AVS_FLAGS_V,
            self::DECLINE_AVS_FLAGS_S,
            self::DECLINE_AVS_FLAGS_N,
            self::DECLINE_AVS_FLAGS_O,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['authType'] = isset($data['authType']) ? $data['authType'] : null;
        $this->container['verbalAuthCode'] = isset($data['verbalAuthCode']) ? $data['verbalAuthCode'] : null;
        $this->container['verbalAuthTransactionId'] = isset($data['verbalAuthTransactionId']) ? $data['verbalAuthTransactionId'] : null;
        $this->container['authIndicator'] = isset($data['authIndicator']) ? $data['authIndicator'] : null;
        $this->container['partialAuthIndicator'] = isset($data['partialAuthIndicator']) ? $data['partialAuthIndicator'] : null;
        $this->container['balanceInquiry'] = isset($data['balanceInquiry']) ? $data['balanceInquiry'] : null;
        $this->container['ignoreAvsResult'] = isset($data['ignoreAvsResult']) ? $data['ignoreAvsResult'] : false;
        $this->container['declineAvsFlags'] = isset($data['declineAvsFlags']) ? $data['declineAvsFlags'] : null;
        $this->container['ignoreCvResult'] = isset($data['ignoreCvResult']) ? $data['ignoreCvResult'] : false;
        $this->container['initiator'] = isset($data['initiator']) ? $data['initiator'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['authType']) && (strlen($this->container['authType']) > 15)) {
            $invalid_properties[] = "invalid value for 'authType', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['verbalAuthCode']) && (strlen($this->container['verbalAuthCode']) > 7)) {
            $invalid_properties[] = "invalid value for 'verbalAuthCode', the character length must be smaller than or equal to 7.";
        }

        if (!is_null($this->container['verbalAuthTransactionId']) && (strlen($this->container['verbalAuthTransactionId']) > 15)) {
            $invalid_properties[] = "invalid value for 'verbalAuthTransactionId', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['authIndicator']) && (strlen($this->container['authIndicator']) > 1)) {
            $invalid_properties[] = "invalid value for 'authIndicator', the character length must be smaller than or equal to 1.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['authType']) > 15) {
            return false;
        }
        if (strlen($this->container['verbalAuthCode']) > 7) {
            return false;
        }
        if (strlen($this->container['verbalAuthTransactionId']) > 15) {
            return false;
        }
        if (strlen($this->container['authIndicator']) > 1) {
            return false;
        }
        return true;
    }


    /**
     * Gets authType
     * @return string
     */
    public function getAuthType()
    {
        return $this->container['authType'];
    }

    /**
     * Sets authType
     * @param string $authType Authorization type. Possible values:   - **AUTOCAPTURE**: automatic capture.  - **STANDARDCAPTURE**: standard capture.  - **VERBAL**: forced capture. Include it in the payment request for a forced capture. Include it in the capture  request for a verbal payment.  For processor-specific information, see the auth_type field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     * @return $this
     */
    public function setAuthType($authType)
    {
        if (!is_null($authType) && (strlen($authType) > 15)) {
            throw new \InvalidArgumentException('invalid length for $authType when calling V2paymentsProcessingInformationAuthorizationOptions., must be smaller than or equal to 15.');
        }

        $this->container['authType'] = $authType;

        return $this;
    }

    /**
     * Gets verbalAuthCode
     * @return string
     */
    public function getVerbalAuthCode()
    {
        return $this->container['verbalAuthCode'];
    }

    /**
     * Sets verbalAuthCode
     * @param string $verbalAuthCode Authorization code.  **Forced Capture**  Use this field to send the authorization code you received from a payment that you authorized outside the CyberSource system.  **Verbal Authorization**  Use this field in CAPTURE API to send the verbally received authorization code.  For processor-specific information, see the auth_code field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     * @return $this
     */
    public function setVerbalAuthCode($verbalAuthCode)
    {
        if (!is_null($verbalAuthCode) && (strlen($verbalAuthCode) > 7)) {
            throw new \InvalidArgumentException('invalid length for $verbalAuthCode when calling V2paymentsProcessingInformationAuthorizationOptions., must be smaller than or equal to 7.');
        }

        $this->container['verbalAuthCode'] = $verbalAuthCode;

        return $this;
    }

    /**
     * Gets verbalAuthTransactionId
     * @return string
     */
    public function getVerbalAuthTransactionId()
    {
        return $this->container['verbalAuthTransactionId'];
    }

    /**
     * Sets verbalAuthTransactionId
     * @param string $verbalAuthTransactionId Transaction ID (TID).
     * @return $this
     */
    public function setVerbalAuthTransactionId($verbalAuthTransactionId)
    {
        if (!is_null($verbalAuthTransactionId) && (strlen($verbalAuthTransactionId) > 15)) {
            throw new \InvalidArgumentException('invalid length for $verbalAuthTransactionId when calling V2paymentsProcessingInformationAuthorizationOptions., must be smaller than or equal to 15.');
        }

        $this->container['verbalAuthTransactionId'] = $verbalAuthTransactionId;

        return $this;
    }

    /**
     * Gets authIndicator
     * @return string
     */
    public function getAuthIndicator()
    {
        return $this->container['authIndicator'];
    }

    /**
     * Sets authIndicator
     * @param string $authIndicator Flag that specifies the purpose of the authorization.  Possible values:  - **0**: Preauthorization  - **1**: Final authorization  For processor-specific information, see the auth_indicator field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     * @return $this
     */
    public function setAuthIndicator($authIndicator)
    {
        if (!is_null($authIndicator) && (strlen($authIndicator) > 1)) {
            throw new \InvalidArgumentException('invalid length for $authIndicator when calling V2paymentsProcessingInformationAuthorizationOptions., must be smaller than or equal to 1.');
        }

        $this->container['authIndicator'] = $authIndicator;

        return $this;
    }

    /**
     * Gets partialAuthIndicator
     * @return bool
     */
    public function getPartialAuthIndicator()
    {
        return $this->container['partialAuthIndicator'];
    }

    /**
     * Sets partialAuthIndicator
     * @param bool $partialAuthIndicator Flag that indicates whether the transaction is enabled for partial authorization or not. When your request includes this field, this value overrides the information in your CyberSource account.  For processor-specific information, see the auth_partial_auth_indicator field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     * @return $this
     */
    public function setPartialAuthIndicator($partialAuthIndicator)
    {
        $this->container['partialAuthIndicator'] = $partialAuthIndicator;

        return $this;
    }

    /**
     * Gets balanceInquiry
     * @return bool
     */
    public function getBalanceInquiry()
    {
        return $this->container['balanceInquiry'];
    }

    /**
     * Sets balanceInquiry
     * @param bool $balanceInquiry Flag that indicates whether to return balance information.
     * @return $this
     */
    public function setBalanceInquiry($balanceInquiry)
    {
        $this->container['balanceInquiry'] = $balanceInquiry;

        return $this;
    }

    /**
     * Gets ignoreAvsResult
     * @return bool
     */
    public function getIgnoreAvsResult()
    {
        return $this->container['ignoreAvsResult'];
    }

    /**
     * Sets ignoreAvsResult
     * @param bool $ignoreAvsResult Flag that indicates whether to allow the capture service to run even when the payment receives an AVS decline.
     * @return $this
     */
    public function setIgnoreAvsResult($ignoreAvsResult)
    {
        $this->container['ignoreAvsResult'] = $ignoreAvsResult;

        return $this;
    }

    /**
     * Gets declineAvsFlags
     * @return string[]
     */
    public function getDeclineAvsFlags()
    {
        return $this->container['declineAvsFlags'];
    }

    /**
     * Sets declineAvsFlags
     * @param string[] $declineAvsFlags An array of AVS flags that cause the reply flag to be returned.  `Important` To receive declines for the AVS code N, include the value N in the array.
     * @return $this
     */
    public function setDeclineAvsFlags($declineAvsFlags)
    {
        $allowed_values = $this->getDeclineAvsFlagsAllowableValues();
        if (!is_null($declineAvsFlags) && array_diff($declineAvsFlags, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'declineAvsFlags', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['declineAvsFlags'] = $declineAvsFlags;

        return $this;
    }

    /**
     * Gets ignoreCvResult
     * @return bool
     */
    public function getIgnoreCvResult()
    {
        return $this->container['ignoreCvResult'];
    }

    /**
     * Sets ignoreCvResult
     * @param bool $ignoreCvResult Flag that indicates whether to allow the capture service to run even when the payment receives a CVN decline.
     * @return $this
     */
    public function setIgnoreCvResult($ignoreCvResult)
    {
        $this->container['ignoreCvResult'] = $ignoreCvResult;

        return $this;
    }

    /**
     * Gets initiator
     * @return \CyberSource\Model\V2paymentsProcessingInformationAuthorizationOptionsInitiator
     */
    public function getInitiator()
    {
        return $this->container['initiator'];
    }

    /**
     * Sets initiator
     * @param \CyberSource\Model\V2paymentsProcessingInformationAuthorizationOptionsInitiator $initiator
     * @return $this
     */
    public function setInitiator($initiator)
    {
        $this->container['initiator'] = $initiator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


