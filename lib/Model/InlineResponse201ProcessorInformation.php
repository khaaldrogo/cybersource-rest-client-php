<?php
/**
 * InlineResponse201ProcessorInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Flex API
 *
 * Simple PAN tokenization service
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * InlineResponse201ProcessorInformation Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse201ProcessorInformation implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_201_processorInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'approvalCode' => 'string',
        'transactionId' => 'string',
        'networkTransactionId' => 'string',
        'providerTransactionId' => 'string',
        'responseCode' => 'string',
        'responseCodeSource' => 'string',
        'responseDetails' => 'string',
        'responseCategoryCode' => 'string',
        'forwardedAcquirerCode' => 'string',
        'avs' => '\CyberSource\Model\InlineResponse201ProcessorInformationAvs',
        'cardVerification' => '\CyberSource\Model\InlineResponse201ProcessorInformationCardVerification',
        'merchantAdvice' => '\CyberSource\Model\InlineResponse201ProcessorInformationMerchantAdvice',
        'electronicVerificationResults' => '\CyberSource\Model\InlineResponse201ProcessorInformationElectronicVerificationResults',
        'customer' => '\CyberSource\Model\InlineResponse201ProcessorInformationCustomer',
        'consumerAuthenticationResponse' => '\CyberSource\Model\InlineResponse201ProcessorInformationConsumerAuthenticationResponse',
        'issuer' => '\CyberSource\Model\InlineResponse201ProcessorInformationIssuer',
        'systemTraceAuditNumber' => 'string',
        'paymentAccountReferenceNumber' => 'string',
        'transactionIntegrityCode' => 'string',
        'amexVerbalAuthReferenceNumber' => 'string',
        'salesSlipNumber' => 'float',
        'masterCardServiceCode' => 'string',
        'masterCardServiceReplyCode' => 'string',
        'masterCardAuthenticationType' => 'string',
        'name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'approvalCode' => null,
        'transactionId' => null,
        'networkTransactionId' => null,
        'providerTransactionId' => null,
        'responseCode' => null,
        'responseCodeSource' => null,
        'responseDetails' => null,
        'responseCategoryCode' => null,
        'forwardedAcquirerCode' => null,
        'avs' => null,
        'cardVerification' => null,
        'merchantAdvice' => null,
        'electronicVerificationResults' => null,
        'customer' => null,
        'consumerAuthenticationResponse' => null,
        'issuer' => null,
        'systemTraceAuditNumber' => null,
        'paymentAccountReferenceNumber' => null,
        'transactionIntegrityCode' => null,
        'amexVerbalAuthReferenceNumber' => null,
        'salesSlipNumber' => null,
        'masterCardServiceCode' => null,
        'masterCardServiceReplyCode' => null,
        'masterCardAuthenticationType' => null,
        'name' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'approvalCode' => 'approvalCode',
        'transactionId' => 'transactionId',
        'networkTransactionId' => 'networkTransactionId',
        'providerTransactionId' => 'providerTransactionId',
        'responseCode' => 'responseCode',
        'responseCodeSource' => 'responseCodeSource',
        'responseDetails' => 'responseDetails',
        'responseCategoryCode' => 'responseCategoryCode',
        'forwardedAcquirerCode' => 'forwardedAcquirerCode',
        'avs' => 'avs',
        'cardVerification' => 'cardVerification',
        'merchantAdvice' => 'merchantAdvice',
        'electronicVerificationResults' => 'electronicVerificationResults',
        'customer' => 'customer',
        'consumerAuthenticationResponse' => 'consumerAuthenticationResponse',
        'issuer' => 'issuer',
        'systemTraceAuditNumber' => 'systemTraceAuditNumber',
        'paymentAccountReferenceNumber' => 'paymentAccountReferenceNumber',
        'transactionIntegrityCode' => 'transactionIntegrityCode',
        'amexVerbalAuthReferenceNumber' => 'amexVerbalAuthReferenceNumber',
        'salesSlipNumber' => 'salesSlipNumber',
        'masterCardServiceCode' => 'masterCardServiceCode',
        'masterCardServiceReplyCode' => 'masterCardServiceReplyCode',
        'masterCardAuthenticationType' => 'masterCardAuthenticationType',
        'name' => 'name'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'approvalCode' => 'setApprovalCode',
        'transactionId' => 'setTransactionId',
        'networkTransactionId' => 'setNetworkTransactionId',
        'providerTransactionId' => 'setProviderTransactionId',
        'responseCode' => 'setResponseCode',
        'responseCodeSource' => 'setResponseCodeSource',
        'responseDetails' => 'setResponseDetails',
        'responseCategoryCode' => 'setResponseCategoryCode',
        'forwardedAcquirerCode' => 'setForwardedAcquirerCode',
        'avs' => 'setAvs',
        'cardVerification' => 'setCardVerification',
        'merchantAdvice' => 'setMerchantAdvice',
        'electronicVerificationResults' => 'setElectronicVerificationResults',
        'customer' => 'setCustomer',
        'consumerAuthenticationResponse' => 'setConsumerAuthenticationResponse',
        'issuer' => 'setIssuer',
        'systemTraceAuditNumber' => 'setSystemTraceAuditNumber',
        'paymentAccountReferenceNumber' => 'setPaymentAccountReferenceNumber',
        'transactionIntegrityCode' => 'setTransactionIntegrityCode',
        'amexVerbalAuthReferenceNumber' => 'setAmexVerbalAuthReferenceNumber',
        'salesSlipNumber' => 'setSalesSlipNumber',
        'masterCardServiceCode' => 'setMasterCardServiceCode',
        'masterCardServiceReplyCode' => 'setMasterCardServiceReplyCode',
        'masterCardAuthenticationType' => 'setMasterCardAuthenticationType',
        'name' => 'setName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'approvalCode' => 'getApprovalCode',
        'transactionId' => 'getTransactionId',
        'networkTransactionId' => 'getNetworkTransactionId',
        'providerTransactionId' => 'getProviderTransactionId',
        'responseCode' => 'getResponseCode',
        'responseCodeSource' => 'getResponseCodeSource',
        'responseDetails' => 'getResponseDetails',
        'responseCategoryCode' => 'getResponseCategoryCode',
        'forwardedAcquirerCode' => 'getForwardedAcquirerCode',
        'avs' => 'getAvs',
        'cardVerification' => 'getCardVerification',
        'merchantAdvice' => 'getMerchantAdvice',
        'electronicVerificationResults' => 'getElectronicVerificationResults',
        'customer' => 'getCustomer',
        'consumerAuthenticationResponse' => 'getConsumerAuthenticationResponse',
        'issuer' => 'getIssuer',
        'systemTraceAuditNumber' => 'getSystemTraceAuditNumber',
        'paymentAccountReferenceNumber' => 'getPaymentAccountReferenceNumber',
        'transactionIntegrityCode' => 'getTransactionIntegrityCode',
        'amexVerbalAuthReferenceNumber' => 'getAmexVerbalAuthReferenceNumber',
        'salesSlipNumber' => 'getSalesSlipNumber',
        'masterCardServiceCode' => 'getMasterCardServiceCode',
        'masterCardServiceReplyCode' => 'getMasterCardServiceReplyCode',
        'masterCardAuthenticationType' => 'getMasterCardAuthenticationType',
        'name' => 'getName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['approvalCode'] = isset($data['approvalCode']) ? $data['approvalCode'] : null;
        $this->container['transactionId'] = isset($data['transactionId']) ? $data['transactionId'] : null;
        $this->container['networkTransactionId'] = isset($data['networkTransactionId']) ? $data['networkTransactionId'] : null;
        $this->container['providerTransactionId'] = isset($data['providerTransactionId']) ? $data['providerTransactionId'] : null;
        $this->container['responseCode'] = isset($data['responseCode']) ? $data['responseCode'] : null;
        $this->container['responseCodeSource'] = isset($data['responseCodeSource']) ? $data['responseCodeSource'] : null;
        $this->container['responseDetails'] = isset($data['responseDetails']) ? $data['responseDetails'] : null;
        $this->container['responseCategoryCode'] = isset($data['responseCategoryCode']) ? $data['responseCategoryCode'] : null;
        $this->container['forwardedAcquirerCode'] = isset($data['forwardedAcquirerCode']) ? $data['forwardedAcquirerCode'] : null;
        $this->container['avs'] = isset($data['avs']) ? $data['avs'] : null;
        $this->container['cardVerification'] = isset($data['cardVerification']) ? $data['cardVerification'] : null;
        $this->container['merchantAdvice'] = isset($data['merchantAdvice']) ? $data['merchantAdvice'] : null;
        $this->container['electronicVerificationResults'] = isset($data['electronicVerificationResults']) ? $data['electronicVerificationResults'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['consumerAuthenticationResponse'] = isset($data['consumerAuthenticationResponse']) ? $data['consumerAuthenticationResponse'] : null;
        $this->container['issuer'] = isset($data['issuer']) ? $data['issuer'] : null;
        $this->container['systemTraceAuditNumber'] = isset($data['systemTraceAuditNumber']) ? $data['systemTraceAuditNumber'] : null;
        $this->container['paymentAccountReferenceNumber'] = isset($data['paymentAccountReferenceNumber']) ? $data['paymentAccountReferenceNumber'] : null;
        $this->container['transactionIntegrityCode'] = isset($data['transactionIntegrityCode']) ? $data['transactionIntegrityCode'] : null;
        $this->container['amexVerbalAuthReferenceNumber'] = isset($data['amexVerbalAuthReferenceNumber']) ? $data['amexVerbalAuthReferenceNumber'] : null;
        $this->container['salesSlipNumber'] = isset($data['salesSlipNumber']) ? $data['salesSlipNumber'] : null;
        $this->container['masterCardServiceCode'] = isset($data['masterCardServiceCode']) ? $data['masterCardServiceCode'] : null;
        $this->container['masterCardServiceReplyCode'] = isset($data['masterCardServiceReplyCode']) ? $data['masterCardServiceReplyCode'] : null;
        $this->container['masterCardAuthenticationType'] = isset($data['masterCardAuthenticationType']) ? $data['masterCardAuthenticationType'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['transactionId']) && (strlen($this->container['transactionId']) > 50)) {
            $invalid_properties[] = "invalid value for 'transactionId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['responseCode']) && (strlen($this->container['responseCode']) > 10)) {
            $invalid_properties[] = "invalid value for 'responseCode', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['responseCodeSource']) && (strlen($this->container['responseCodeSource']) > 1)) {
            $invalid_properties[] = "invalid value for 'responseCodeSource', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['responseDetails']) && (strlen($this->container['responseDetails']) > 255)) {
            $invalid_properties[] = "invalid value for 'responseDetails', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['responseCategoryCode']) && (strlen($this->container['responseCategoryCode']) > 32)) {
            $invalid_properties[] = "invalid value for 'responseCategoryCode', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['forwardedAcquirerCode']) && (strlen($this->container['forwardedAcquirerCode']) > 32)) {
            $invalid_properties[] = "invalid value for 'forwardedAcquirerCode', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['systemTraceAuditNumber']) && (strlen($this->container['systemTraceAuditNumber']) > 6)) {
            $invalid_properties[] = "invalid value for 'systemTraceAuditNumber', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['paymentAccountReferenceNumber']) && (strlen($this->container['paymentAccountReferenceNumber']) > 32)) {
            $invalid_properties[] = "invalid value for 'paymentAccountReferenceNumber', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['transactionIntegrityCode']) && (strlen($this->container['transactionIntegrityCode']) > 2)) {
            $invalid_properties[] = "invalid value for 'transactionIntegrityCode', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['amexVerbalAuthReferenceNumber']) && (strlen($this->container['amexVerbalAuthReferenceNumber']) > 6)) {
            $invalid_properties[] = "invalid value for 'amexVerbalAuthReferenceNumber', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['salesSlipNumber']) && ($this->container['salesSlipNumber'] > 99999)) {
            $invalid_properties[] = "invalid value for 'salesSlipNumber', must be smaller than or equal to 99999.";
        }

        if (!is_null($this->container['masterCardServiceCode']) && (strlen($this->container['masterCardServiceCode']) > 2)) {
            $invalid_properties[] = "invalid value for 'masterCardServiceCode', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['masterCardServiceReplyCode']) && (strlen($this->container['masterCardServiceReplyCode']) > 1)) {
            $invalid_properties[] = "invalid value for 'masterCardServiceReplyCode', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['masterCardAuthenticationType']) && (strlen($this->container['masterCardAuthenticationType']) > 1)) {
            $invalid_properties[] = "invalid value for 'masterCardAuthenticationType', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['name']) && (strlen($this->container['name']) > 30)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be smaller than or equal to 30.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['transactionId']) > 50) {
            return false;
        }
        if (strlen($this->container['responseCode']) > 10) {
            return false;
        }
        if (strlen($this->container['responseCodeSource']) > 1) {
            return false;
        }
        if (strlen($this->container['responseDetails']) > 255) {
            return false;
        }
        if (strlen($this->container['responseCategoryCode']) > 32) {
            return false;
        }
        if (strlen($this->container['forwardedAcquirerCode']) > 32) {
            return false;
        }
        if (strlen($this->container['systemTraceAuditNumber']) > 6) {
            return false;
        }
        if (strlen($this->container['paymentAccountReferenceNumber']) > 32) {
            return false;
        }
        if (strlen($this->container['transactionIntegrityCode']) > 2) {
            return false;
        }
        if (strlen($this->container['amexVerbalAuthReferenceNumber']) > 6) {
            return false;
        }
        if ($this->container['salesSlipNumber'] > 99999) {
            return false;
        }
        if (strlen($this->container['masterCardServiceCode']) > 2) {
            return false;
        }
        if (strlen($this->container['masterCardServiceReplyCode']) > 1) {
            return false;
        }
        if (strlen($this->container['masterCardAuthenticationType']) > 1) {
            return false;
        }
        if (strlen($this->container['name']) > 30) {
            return false;
        }
        return true;
    }


    /**
     * Gets approvalCode
     * @return string
     */
    public function getApprovalCode()
    {
        return $this->container['approvalCode'];
    }

    /**
     * Sets approvalCode
     * @param string $approvalCode Authorization code. Returned only when the processor returns this value.
     * @return $this
     */
    public function setApprovalCode($approvalCode)
    {
        $this->container['approvalCode'] = $approvalCode;

        return $this;
    }

    /**
     * Gets transactionId
     * @return string
     */
    public function getTransactionId()
    {
        return $this->container['transactionId'];
    }

    /**
     * Sets transactionId
     * @param string $transactionId Network transaction identifier (TID). You can use this value to identify a specific transaction when you are discussing the transaction with your processor. Not all processors provide this  value.
     * @return $this
     */
    public function setTransactionId($transactionId)
    {
        if (!is_null($transactionId) && (strlen($transactionId) > 50)) {
            throw new \InvalidArgumentException('invalid length for $transactionId when calling InlineResponse201ProcessorInformation., must be smaller than or equal to 50.');
        }

        $this->container['transactionId'] = $transactionId;

        return $this;
    }

    /**
     * Gets networkTransactionId
     * @return string
     */
    public function getNetworkTransactionId()
    {
        return $this->container['networkTransactionId'];
    }

    /**
     * Sets networkTransactionId
     * @param string $networkTransactionId TBD
     * @return $this
     */
    public function setNetworkTransactionId($networkTransactionId)
    {
        $this->container['networkTransactionId'] = $networkTransactionId;

        return $this;
    }

    /**
     * Gets providerTransactionId
     * @return string
     */
    public function getProviderTransactionId()
    {
        return $this->container['providerTransactionId'];
    }

    /**
     * Sets providerTransactionId
     * @param string $providerTransactionId TBD
     * @return $this
     */
    public function setProviderTransactionId($providerTransactionId)
    {
        $this->container['providerTransactionId'] = $providerTransactionId;

        return $this;
    }

    /**
     * Gets responseCode
     * @return string
     */
    public function getResponseCode()
    {
        return $this->container['responseCode'];
    }

    /**
     * Sets responseCode
     * @param string $responseCode For most processors, this is the error message sent directly from the bank. Returned only when the processor returns this value.  Important Do not use this field to evaluate the result of the authorization.
     * @return $this
     */
    public function setResponseCode($responseCode)
    {
        if (!is_null($responseCode) && (strlen($responseCode) > 10)) {
            throw new \InvalidArgumentException('invalid length for $responseCode when calling InlineResponse201ProcessorInformation., must be smaller than or equal to 10.');
        }

        $this->container['responseCode'] = $responseCode;

        return $this;
    }

    /**
     * Gets responseCodeSource
     * @return string
     */
    public function getResponseCodeSource()
    {
        return $this->container['responseCodeSource'];
    }

    /**
     * Sets responseCodeSource
     * @param string $responseCodeSource Used by Visa only and contains the response source/reason code that identifies the source of the response decision.
     * @return $this
     */
    public function setResponseCodeSource($responseCodeSource)
    {
        if (!is_null($responseCodeSource) && (strlen($responseCodeSource) > 1)) {
            throw new \InvalidArgumentException('invalid length for $responseCodeSource when calling InlineResponse201ProcessorInformation., must be smaller than or equal to 1.');
        }

        $this->container['responseCodeSource'] = $responseCodeSource;

        return $this;
    }

    /**
     * Gets responseDetails
     * @return string
     */
    public function getResponseDetails()
    {
        return $this->container['responseDetails'];
    }

    /**
     * Sets responseDetails
     * @param string $responseDetails This field might contain information about a decline. This field is supported only for **CyberSource through VisaNet**.
     * @return $this
     */
    public function setResponseDetails($responseDetails)
    {
        if (!is_null($responseDetails) && (strlen($responseDetails) > 255)) {
            throw new \InvalidArgumentException('invalid length for $responseDetails when calling InlineResponse201ProcessorInformation., must be smaller than or equal to 255.');
        }

        $this->container['responseDetails'] = $responseDetails;

        return $this;
    }

    /**
     * Gets responseCategoryCode
     * @return string
     */
    public function getResponseCategoryCode()
    {
        return $this->container['responseCategoryCode'];
    }

    /**
     * Sets responseCategoryCode
     * @param string $responseCategoryCode Processor-defined response category code. The associated detail error code is in the auth_auth_response field or the auth_reversal_auth_ response field depending on which service you requested.  This field is supported only for:   - Japanese issuers  - Domestic transactions in Japan  - Comercio Latinoâ€”processor transaction ID required for troubleshooting  **Maximum length for processors**:   - Comercio Latino: 32  - All other processors: 3
     * @return $this
     */
    public function setResponseCategoryCode($responseCategoryCode)
    {
        if (!is_null($responseCategoryCode) && (strlen($responseCategoryCode) > 32)) {
            throw new \InvalidArgumentException('invalid length for $responseCategoryCode when calling InlineResponse201ProcessorInformation., must be smaller than or equal to 32.');
        }

        $this->container['responseCategoryCode'] = $responseCategoryCode;

        return $this;
    }

    /**
     * Gets forwardedAcquirerCode
     * @return string
     */
    public function getForwardedAcquirerCode()
    {
        return $this->container['forwardedAcquirerCode'];
    }

    /**
     * Sets forwardedAcquirerCode
     * @param string $forwardedAcquirerCode Name of the Japanese acquirer that processed the transaction. Returned only for CCS (CAFIS) and JCN Gateway. Please contact the CyberSource Japan Support Group for more information.
     * @return $this
     */
    public function setForwardedAcquirerCode($forwardedAcquirerCode)
    {
        if (!is_null($forwardedAcquirerCode) && (strlen($forwardedAcquirerCode) > 32)) {
            throw new \InvalidArgumentException('invalid length for $forwardedAcquirerCode when calling InlineResponse201ProcessorInformation., must be smaller than or equal to 32.');
        }

        $this->container['forwardedAcquirerCode'] = $forwardedAcquirerCode;

        return $this;
    }

    /**
     * Gets avs
     * @return \CyberSource\Model\InlineResponse201ProcessorInformationAvs
     */
    public function getAvs()
    {
        return $this->container['avs'];
    }

    /**
     * Sets avs
     * @param \CyberSource\Model\InlineResponse201ProcessorInformationAvs $avs
     * @return $this
     */
    public function setAvs($avs)
    {
        $this->container['avs'] = $avs;

        return $this;
    }

    /**
     * Gets cardVerification
     * @return \CyberSource\Model\InlineResponse201ProcessorInformationCardVerification
     */
    public function getCardVerification()
    {
        return $this->container['cardVerification'];
    }

    /**
     * Sets cardVerification
     * @param \CyberSource\Model\InlineResponse201ProcessorInformationCardVerification $cardVerification
     * @return $this
     */
    public function setCardVerification($cardVerification)
    {
        $this->container['cardVerification'] = $cardVerification;

        return $this;
    }

    /**
     * Gets merchantAdvice
     * @return \CyberSource\Model\InlineResponse201ProcessorInformationMerchantAdvice
     */
    public function getMerchantAdvice()
    {
        return $this->container['merchantAdvice'];
    }

    /**
     * Sets merchantAdvice
     * @param \CyberSource\Model\InlineResponse201ProcessorInformationMerchantAdvice $merchantAdvice
     * @return $this
     */
    public function setMerchantAdvice($merchantAdvice)
    {
        $this->container['merchantAdvice'] = $merchantAdvice;

        return $this;
    }

    /**
     * Gets electronicVerificationResults
     * @return \CyberSource\Model\InlineResponse201ProcessorInformationElectronicVerificationResults
     */
    public function getElectronicVerificationResults()
    {
        return $this->container['electronicVerificationResults'];
    }

    /**
     * Sets electronicVerificationResults
     * @param \CyberSource\Model\InlineResponse201ProcessorInformationElectronicVerificationResults $electronicVerificationResults
     * @return $this
     */
    public function setElectronicVerificationResults($electronicVerificationResults)
    {
        $this->container['electronicVerificationResults'] = $electronicVerificationResults;

        return $this;
    }

    /**
     * Gets customer
     * @return \CyberSource\Model\InlineResponse201ProcessorInformationCustomer
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     * @param \CyberSource\Model\InlineResponse201ProcessorInformationCustomer $customer
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets consumerAuthenticationResponse
     * @return \CyberSource\Model\InlineResponse201ProcessorInformationConsumerAuthenticationResponse
     */
    public function getConsumerAuthenticationResponse()
    {
        return $this->container['consumerAuthenticationResponse'];
    }

    /**
     * Sets consumerAuthenticationResponse
     * @param \CyberSource\Model\InlineResponse201ProcessorInformationConsumerAuthenticationResponse $consumerAuthenticationResponse
     * @return $this
     */
    public function setConsumerAuthenticationResponse($consumerAuthenticationResponse)
    {
        $this->container['consumerAuthenticationResponse'] = $consumerAuthenticationResponse;

        return $this;
    }

    /**
     * Gets issuer
     * @return \CyberSource\Model\InlineResponse201ProcessorInformationIssuer
     */
    public function getIssuer()
    {
        return $this->container['issuer'];
    }

    /**
     * Sets issuer
     * @param \CyberSource\Model\InlineResponse201ProcessorInformationIssuer $issuer
     * @return $this
     */
    public function setIssuer($issuer)
    {
        $this->container['issuer'] = $issuer;

        return $this;
    }

    /**
     * Gets systemTraceAuditNumber
     * @return string
     */
    public function getSystemTraceAuditNumber()
    {
        return $this->container['systemTraceAuditNumber'];
    }

    /**
     * Sets systemTraceAuditNumber
     * @param string $systemTraceAuditNumber This field is returned only for **American Express Direct** and **CyberSource through VisaNet**.  **American Express Direct**  System trace audit number (STAN). This value identifies the transaction and is useful when investigating a chargeback dispute.  **CyberSource through VisaNet**  System trace number that must be printed on the customerâ€™s receipt.
     * @return $this
     */
    public function setSystemTraceAuditNumber($systemTraceAuditNumber)
    {
        if (!is_null($systemTraceAuditNumber) && (strlen($systemTraceAuditNumber) > 6)) {
            throw new \InvalidArgumentException('invalid length for $systemTraceAuditNumber when calling InlineResponse201ProcessorInformation., must be smaller than or equal to 6.');
        }

        $this->container['systemTraceAuditNumber'] = $systemTraceAuditNumber;

        return $this;
    }

    /**
     * Gets paymentAccountReferenceNumber
     * @return string
     */
    public function getPaymentAccountReferenceNumber()
    {
        return $this->container['paymentAccountReferenceNumber'];
    }

    /**
     * Sets paymentAccountReferenceNumber
     * @param string $paymentAccountReferenceNumber Visa-generated reference number that identifies a card-present transaction for which youprovided one of the following:   - Visa primary account number (PAN)  - Visa-generated token for a PAN  This reference number serves as a link to the cardholder account and to all transactions for that account.
     * @return $this
     */
    public function setPaymentAccountReferenceNumber($paymentAccountReferenceNumber)
    {
        if (!is_null($paymentAccountReferenceNumber) && (strlen($paymentAccountReferenceNumber) > 32)) {
            throw new \InvalidArgumentException('invalid length for $paymentAccountReferenceNumber when calling InlineResponse201ProcessorInformation., must be smaller than or equal to 32.');
        }

        $this->container['paymentAccountReferenceNumber'] = $paymentAccountReferenceNumber;

        return $this;
    }

    /**
     * Gets transactionIntegrityCode
     * @return string
     */
    public function getTransactionIntegrityCode()
    {
        return $this->container['transactionIntegrityCode'];
    }

    /**
     * Sets transactionIntegrityCode
     * @param string $transactionIntegrityCode Transaction integrity classification provided by Mastercard. This value specifies Mastercardâ€™s evaluation of the transactionâ€™s safety and security. This field is returned only for **CyberSource through VisaNet**.  For card-present transactions, possible values:   - **A1**: EMV or token in a secure, trusted environment  - **B1**: EMV or chip equivalent  - **C1**: Magnetic stripe  - **E1**: Key entered  - **U0**: Unclassified  For card-not-present transactions, possible values:   - **A2**: Digital transactions  - **B2**: Authenticated checkout  - **C2**: Transaction validation  - **D2**: Enhanced data  - **E2**: Generic messaging  - **U0**: Unclassified  For information about these values, contact Mastercard or your acquirer.
     * @return $this
     */
    public function setTransactionIntegrityCode($transactionIntegrityCode)
    {
        if (!is_null($transactionIntegrityCode) && (strlen($transactionIntegrityCode) > 2)) {
            throw new \InvalidArgumentException('invalid length for $transactionIntegrityCode when calling InlineResponse201ProcessorInformation., must be smaller than or equal to 2.');
        }

        $this->container['transactionIntegrityCode'] = $transactionIntegrityCode;

        return $this;
    }

    /**
     * Gets amexVerbalAuthReferenceNumber
     * @return string
     */
    public function getAmexVerbalAuthReferenceNumber()
    {
        return $this->container['amexVerbalAuthReferenceNumber'];
    }

    /**
     * Sets amexVerbalAuthReferenceNumber
     * @param string $amexVerbalAuthReferenceNumber Referral response number for a verbal authorization with FDMS Nashville when using an American Express card. Give this number to American Express when you call them for the verbal authorization.
     * @return $this
     */
    public function setAmexVerbalAuthReferenceNumber($amexVerbalAuthReferenceNumber)
    {
        if (!is_null($amexVerbalAuthReferenceNumber) && (strlen($amexVerbalAuthReferenceNumber) > 6)) {
            throw new \InvalidArgumentException('invalid length for $amexVerbalAuthReferenceNumber when calling InlineResponse201ProcessorInformation., must be smaller than or equal to 6.');
        }

        $this->container['amexVerbalAuthReferenceNumber'] = $amexVerbalAuthReferenceNumber;

        return $this;
    }

    /**
     * Gets salesSlipNumber
     * @return float
     */
    public function getSalesSlipNumber()
    {
        return $this->container['salesSlipNumber'];
    }

    /**
     * Sets salesSlipNumber
     * @param float $salesSlipNumber Transaction identifier that CyberSource generates. You have the option of printing the sales slip number on the receipt.  This field is supported only for **JCN Gateway**.
     * @return $this
     */
    public function setSalesSlipNumber($salesSlipNumber)
    {

        if (!is_null($salesSlipNumber) && ($salesSlipNumber > 99999)) {
            throw new \InvalidArgumentException('invalid value for $salesSlipNumber when calling InlineResponse201ProcessorInformation., must be smaller than or equal to 99999.');
        }

        $this->container['salesSlipNumber'] = $salesSlipNumber;

        return $this;
    }

    /**
     * Gets masterCardServiceCode
     * @return string
     */
    public function getMasterCardServiceCode()
    {
        return $this->container['masterCardServiceCode'];
    }

    /**
     * Sets masterCardServiceCode
     * @param string $masterCardServiceCode Mastercard service that was used for the transaction. Mastercard provides this value to CyberSource.  Possible value:  - 53: Mastercard card-on-file token service
     * @return $this
     */
    public function setMasterCardServiceCode($masterCardServiceCode)
    {
        if (!is_null($masterCardServiceCode) && (strlen($masterCardServiceCode) > 2)) {
            throw new \InvalidArgumentException('invalid length for $masterCardServiceCode when calling InlineResponse201ProcessorInformation., must be smaller than or equal to 2.');
        }

        $this->container['masterCardServiceCode'] = $masterCardServiceCode;

        return $this;
    }

    /**
     * Gets masterCardServiceReplyCode
     * @return string
     */
    public function getMasterCardServiceReplyCode()
    {
        return $this->container['masterCardServiceReplyCode'];
    }

    /**
     * Sets masterCardServiceReplyCode
     * @param string $masterCardServiceReplyCode Result of the Mastercard card-on-file token service. Mastercard provides this value to CyberSource.  Possible values:   - **C**: Service completed successfully.  - **F**: One of the following:    - Incorrect Mastercard POS entry mode. The Mastercard POS entry mode should be 81 for an authorization or      authorization reversal.    - Incorrect Mastercard POS entry mode. The Mastercard POS entry mode should be 01 for a tokenized request.    - Token requestor ID is missing or formatted incorrectly.  - **I**: One of the following:    - Invalid token requestor ID.    - Suspended or deactivated token.    - Invalid token (not in mapping table).  - **T**: Invalid combination of token requestor ID and token.  - **U**: Expired token.  - **W**: Primary account number (PAN) listed in electronic warning bulletin.  Note This field is returned only for **CyberSource through VisaNet**.
     * @return $this
     */
    public function setMasterCardServiceReplyCode($masterCardServiceReplyCode)
    {
        if (!is_null($masterCardServiceReplyCode) && (strlen($masterCardServiceReplyCode) > 1)) {
            throw new \InvalidArgumentException('invalid length for $masterCardServiceReplyCode when calling InlineResponse201ProcessorInformation., must be smaller than or equal to 1.');
        }

        $this->container['masterCardServiceReplyCode'] = $masterCardServiceReplyCode;

        return $this;
    }

    /**
     * Gets masterCardAuthenticationType
     * @return string
     */
    public function getMasterCardAuthenticationType()
    {
        return $this->container['masterCardAuthenticationType'];
    }

    /**
     * Sets masterCardAuthenticationType
     * @param string $masterCardAuthenticationType Type of authentication for which the transaction qualifies as determined by the Mastercard authentication service, which confirms the identity of the cardholder. Mastercard provides this value to CyberSource.  Possible values:   - **1**: Transaction qualifies for Mastercard authentication type 1.  - **2**: Transaction qualifies for Mastercard authentication type 2.
     * @return $this
     */
    public function setMasterCardAuthenticationType($masterCardAuthenticationType)
    {
        if (!is_null($masterCardAuthenticationType) && (strlen($masterCardAuthenticationType) > 1)) {
            throw new \InvalidArgumentException('invalid length for $masterCardAuthenticationType when calling InlineResponse201ProcessorInformation., must be smaller than or equal to 1.');
        }

        $this->container['masterCardAuthenticationType'] = $masterCardAuthenticationType;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Name of the Processor.
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (strlen($name) > 30)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InlineResponse201ProcessorInformation., must be smaller than or equal to 30.');
        }

        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


