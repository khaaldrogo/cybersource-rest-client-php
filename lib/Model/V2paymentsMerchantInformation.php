<?php
/**
 * V2paymentsMerchantInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Flex API
 *
 * Simple PAN tokenization service
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * V2paymentsMerchantInformation Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class V2paymentsMerchantInformation implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'v2payments_merchantInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'merchantDescriptor' => '\CyberSource\Model\V2paymentsMerchantInformationMerchantDescriptor',
        'salesOrganizationId' => 'string',
        'categoryCode' => 'int',
        'vatRegistrationNumber' => 'string',
        'cardAcceptorReferenceNumber' => 'string',
        'transactionLocalDateTime' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'merchantDescriptor' => null,
        'salesOrganizationId' => null,
        'categoryCode' => null,
        'vatRegistrationNumber' => null,
        'cardAcceptorReferenceNumber' => null,
        'transactionLocalDateTime' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'merchantDescriptor' => 'merchantDescriptor',
        'salesOrganizationId' => 'salesOrganizationId',
        'categoryCode' => 'categoryCode',
        'vatRegistrationNumber' => 'vatRegistrationNumber',
        'cardAcceptorReferenceNumber' => 'cardAcceptorReferenceNumber',
        'transactionLocalDateTime' => 'transactionLocalDateTime'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'merchantDescriptor' => 'setMerchantDescriptor',
        'salesOrganizationId' => 'setSalesOrganizationId',
        'categoryCode' => 'setCategoryCode',
        'vatRegistrationNumber' => 'setVatRegistrationNumber',
        'cardAcceptorReferenceNumber' => 'setCardAcceptorReferenceNumber',
        'transactionLocalDateTime' => 'setTransactionLocalDateTime'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'merchantDescriptor' => 'getMerchantDescriptor',
        'salesOrganizationId' => 'getSalesOrganizationId',
        'categoryCode' => 'getCategoryCode',
        'vatRegistrationNumber' => 'getVatRegistrationNumber',
        'cardAcceptorReferenceNumber' => 'getCardAcceptorReferenceNumber',
        'transactionLocalDateTime' => 'getTransactionLocalDateTime'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['merchantDescriptor'] = isset($data['merchantDescriptor']) ? $data['merchantDescriptor'] : null;
        $this->container['salesOrganizationId'] = isset($data['salesOrganizationId']) ? $data['salesOrganizationId'] : null;
        $this->container['categoryCode'] = isset($data['categoryCode']) ? $data['categoryCode'] : null;
        $this->container['vatRegistrationNumber'] = isset($data['vatRegistrationNumber']) ? $data['vatRegistrationNumber'] : null;
        $this->container['cardAcceptorReferenceNumber'] = isset($data['cardAcceptorReferenceNumber']) ? $data['cardAcceptorReferenceNumber'] : null;
        $this->container['transactionLocalDateTime'] = isset($data['transactionLocalDateTime']) ? $data['transactionLocalDateTime'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['salesOrganizationId']) && (strlen($this->container['salesOrganizationId']) > 11)) {
            $invalid_properties[] = "invalid value for 'salesOrganizationId', the character length must be smaller than or equal to 11.";
        }

        if (!is_null($this->container['categoryCode']) && ($this->container['categoryCode'] > 9999)) {
            $invalid_properties[] = "invalid value for 'categoryCode', must be smaller than or equal to 9999.";
        }

        if (!is_null($this->container['vatRegistrationNumber']) && (strlen($this->container['vatRegistrationNumber']) > 21)) {
            $invalid_properties[] = "invalid value for 'vatRegistrationNumber', the character length must be smaller than or equal to 21.";
        }

        if (!is_null($this->container['cardAcceptorReferenceNumber']) && (strlen($this->container['cardAcceptorReferenceNumber']) > 25)) {
            $invalid_properties[] = "invalid value for 'cardAcceptorReferenceNumber', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['transactionLocalDateTime']) && (strlen($this->container['transactionLocalDateTime']) > 14)) {
            $invalid_properties[] = "invalid value for 'transactionLocalDateTime', the character length must be smaller than or equal to 14.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['salesOrganizationId']) > 11) {
            return false;
        }
        if ($this->container['categoryCode'] > 9999) {
            return false;
        }
        if (strlen($this->container['vatRegistrationNumber']) > 21) {
            return false;
        }
        if (strlen($this->container['cardAcceptorReferenceNumber']) > 25) {
            return false;
        }
        if (strlen($this->container['transactionLocalDateTime']) > 14) {
            return false;
        }
        return true;
    }


    /**
     * Gets merchantDescriptor
     * @return \CyberSource\Model\V2paymentsMerchantInformationMerchantDescriptor
     */
    public function getMerchantDescriptor()
    {
        return $this->container['merchantDescriptor'];
    }

    /**
     * Sets merchantDescriptor
     * @param \CyberSource\Model\V2paymentsMerchantInformationMerchantDescriptor $merchantDescriptor
     * @return $this
     */
    public function setMerchantDescriptor($merchantDescriptor)
    {
        $this->container['merchantDescriptor'] = $merchantDescriptor;

        return $this;
    }

    /**
     * Gets salesOrganizationId
     * @return string
     */
    public function getSalesOrganizationId()
    {
        return $this->container['salesOrganizationId'];
    }

    /**
     * Sets salesOrganizationId
     * @param string $salesOrganizationId Company ID assigned to an independent sales organization. Get this value from Mastercard.  For processor-specific information, see the sales_organization_ID field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     * @return $this
     */
    public function setSalesOrganizationId($salesOrganizationId)
    {
        if (!is_null($salesOrganizationId) && (strlen($salesOrganizationId) > 11)) {
            throw new \InvalidArgumentException('invalid length for $salesOrganizationId when calling V2paymentsMerchantInformation., must be smaller than or equal to 11.');
        }

        $this->container['salesOrganizationId'] = $salesOrganizationId;

        return $this;
    }

    /**
     * Gets categoryCode
     * @return int
     */
    public function getCategoryCode()
    {
        return $this->container['categoryCode'];
    }

    /**
     * Sets categoryCode
     * @param int $categoryCode Four-digit number that the payment card industry uses to classify merchants into market segments. Visa assigned one or more of these values to your business when you started accepting Visa cards.  If you do not include this field in your request, CyberSource uses the value in your CyberSource account.  For processor-specific information, see the merchant_category_code field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     * @return $this
     */
    public function setCategoryCode($categoryCode)
    {

        if (!is_null($categoryCode) && ($categoryCode > 9999)) {
            throw new \InvalidArgumentException('invalid value for $categoryCode when calling V2paymentsMerchantInformation., must be smaller than or equal to 9999.');
        }

        $this->container['categoryCode'] = $categoryCode;

        return $this;
    }

    /**
     * Gets vatRegistrationNumber
     * @return string
     */
    public function getVatRegistrationNumber()
    {
        return $this->container['vatRegistrationNumber'];
    }

    /**
     * Sets vatRegistrationNumber
     * @param string $vatRegistrationNumber Your government-assigned tax identification number.  For CtV processors, the maximum length is 20.  For other processor-specific information, see the merchant_vat_registration_number field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     * @return $this
     */
    public function setVatRegistrationNumber($vatRegistrationNumber)
    {
        if (!is_null($vatRegistrationNumber) && (strlen($vatRegistrationNumber) > 21)) {
            throw new \InvalidArgumentException('invalid length for $vatRegistrationNumber when calling V2paymentsMerchantInformation., must be smaller than or equal to 21.');
        }

        $this->container['vatRegistrationNumber'] = $vatRegistrationNumber;

        return $this;
    }

    /**
     * Gets cardAcceptorReferenceNumber
     * @return string
     */
    public function getCardAcceptorReferenceNumber()
    {
        return $this->container['cardAcceptorReferenceNumber'];
    }

    /**
     * Sets cardAcceptorReferenceNumber
     * @param string $cardAcceptorReferenceNumber Reference number that facilitates card acceptor/corporation communication and record keeping.  For processor-specific information, see the card_acceptor_ref_number field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     * @return $this
     */
    public function setCardAcceptorReferenceNumber($cardAcceptorReferenceNumber)
    {
        if (!is_null($cardAcceptorReferenceNumber) && (strlen($cardAcceptorReferenceNumber) > 25)) {
            throw new \InvalidArgumentException('invalid length for $cardAcceptorReferenceNumber when calling V2paymentsMerchantInformation., must be smaller than or equal to 25.');
        }

        $this->container['cardAcceptorReferenceNumber'] = $cardAcceptorReferenceNumber;

        return $this;
    }

    /**
     * Gets transactionLocalDateTime
     * @return string
     */
    public function getTransactionLocalDateTime()
    {
        return $this->container['transactionLocalDateTime'];
    }

    /**
     * Sets transactionLocalDateTime
     * @param string $transactionLocalDateTime Local date and time at your physical location. Include both the date and time in this field or leave it blank. This field is supported only for **CyberSource through VisaNet**.  For processor-specific information, see the transaction_local_date_time field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)  `Format: YYYYMMDDhhmmss`, where:   - YYYY = year  - MM = month  - DD = day  - hh = hour  - mm = minutes  - ss = seconds
     * @return $this
     */
    public function setTransactionLocalDateTime($transactionLocalDateTime)
    {
        if (!is_null($transactionLocalDateTime) && (strlen($transactionLocalDateTime) > 14)) {
            throw new \InvalidArgumentException('invalid length for $transactionLocalDateTime when calling V2paymentsMerchantInformation., must be smaller than or equal to 14.');
        }

        $this->container['transactionLocalDateTime'] = $transactionLocalDateTime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


