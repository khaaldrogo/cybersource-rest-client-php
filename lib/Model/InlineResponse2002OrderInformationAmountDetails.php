<?php
/**
 * InlineResponse2002OrderInformationAmountDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Flex API
 *
 * Simple PAN tokenization service
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * InlineResponse2002OrderInformationAmountDetails Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2002OrderInformationAmountDetails implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_2_orderInformation_amountDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'authorizedAmount' => 'string',
        'totalAmount' => 'string',
        'currency' => 'string',
        'discountAmount' => 'string',
        'dutyAmount' => 'string',
        'taxAmount' => 'string',
        'nationalTaxIncluded' => 'string',
        'freightAmount' => 'string',
        'taxDetails' => '\CyberSource\Model\V2paymentsOrderInformationAmountDetailsTaxDetails[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'authorizedAmount' => null,
        'totalAmount' => null,
        'currency' => null,
        'discountAmount' => null,
        'dutyAmount' => null,
        'taxAmount' => null,
        'nationalTaxIncluded' => null,
        'freightAmount' => null,
        'taxDetails' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'authorizedAmount' => 'authorizedAmount',
        'totalAmount' => 'totalAmount',
        'currency' => 'currency',
        'discountAmount' => 'discountAmount',
        'dutyAmount' => 'dutyAmount',
        'taxAmount' => 'taxAmount',
        'nationalTaxIncluded' => 'nationalTaxIncluded',
        'freightAmount' => 'freightAmount',
        'taxDetails' => 'taxDetails'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'authorizedAmount' => 'setAuthorizedAmount',
        'totalAmount' => 'setTotalAmount',
        'currency' => 'setCurrency',
        'discountAmount' => 'setDiscountAmount',
        'dutyAmount' => 'setDutyAmount',
        'taxAmount' => 'setTaxAmount',
        'nationalTaxIncluded' => 'setNationalTaxIncluded',
        'freightAmount' => 'setFreightAmount',
        'taxDetails' => 'setTaxDetails'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'authorizedAmount' => 'getAuthorizedAmount',
        'totalAmount' => 'getTotalAmount',
        'currency' => 'getCurrency',
        'discountAmount' => 'getDiscountAmount',
        'dutyAmount' => 'getDutyAmount',
        'taxAmount' => 'getTaxAmount',
        'nationalTaxIncluded' => 'getNationalTaxIncluded',
        'freightAmount' => 'getFreightAmount',
        'taxDetails' => 'getTaxDetails'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['authorizedAmount'] = isset($data['authorizedAmount']) ? $data['authorizedAmount'] : null;
        $this->container['totalAmount'] = isset($data['totalAmount']) ? $data['totalAmount'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['discountAmount'] = isset($data['discountAmount']) ? $data['discountAmount'] : null;
        $this->container['dutyAmount'] = isset($data['dutyAmount']) ? $data['dutyAmount'] : null;
        $this->container['taxAmount'] = isset($data['taxAmount']) ? $data['taxAmount'] : null;
        $this->container['nationalTaxIncluded'] = isset($data['nationalTaxIncluded']) ? $data['nationalTaxIncluded'] : null;
        $this->container['freightAmount'] = isset($data['freightAmount']) ? $data['freightAmount'] : null;
        $this->container['taxDetails'] = isset($data['taxDetails']) ? $data['taxDetails'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['authorizedAmount']) && (strlen($this->container['authorizedAmount']) > 15)) {
            $invalid_properties[] = "invalid value for 'authorizedAmount', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['totalAmount']) && (strlen($this->container['totalAmount']) > 19)) {
            $invalid_properties[] = "invalid value for 'totalAmount', the character length must be smaller than or equal to 19.";
        }

        if (!is_null($this->container['currency']) && (strlen($this->container['currency']) > 3)) {
            $invalid_properties[] = "invalid value for 'currency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['discountAmount']) && (strlen($this->container['discountAmount']) > 15)) {
            $invalid_properties[] = "invalid value for 'discountAmount', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['dutyAmount']) && (strlen($this->container['dutyAmount']) > 15)) {
            $invalid_properties[] = "invalid value for 'dutyAmount', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['taxAmount']) && (strlen($this->container['taxAmount']) > 12)) {
            $invalid_properties[] = "invalid value for 'taxAmount', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['nationalTaxIncluded']) && (strlen($this->container['nationalTaxIncluded']) > 1)) {
            $invalid_properties[] = "invalid value for 'nationalTaxIncluded', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['freightAmount']) && (strlen($this->container['freightAmount']) > 13)) {
            $invalid_properties[] = "invalid value for 'freightAmount', the character length must be smaller than or equal to 13.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['authorizedAmount']) > 15) {
            return false;
        }
        if (strlen($this->container['totalAmount']) > 19) {
            return false;
        }
        if (strlen($this->container['currency']) > 3) {
            return false;
        }
        if (strlen($this->container['discountAmount']) > 15) {
            return false;
        }
        if (strlen($this->container['dutyAmount']) > 15) {
            return false;
        }
        if (strlen($this->container['taxAmount']) > 12) {
            return false;
        }
        if (strlen($this->container['nationalTaxIncluded']) > 1) {
            return false;
        }
        if (strlen($this->container['freightAmount']) > 13) {
            return false;
        }
        return true;
    }


    /**
     * Gets authorizedAmount
     * @return string
     */
    public function getAuthorizedAmount()
    {
        return $this->container['authorizedAmount'];
    }

    /**
     * Sets authorizedAmount
     * @param string $authorizedAmount Amount that was authorized.
     * @return $this
     */
    public function setAuthorizedAmount($authorizedAmount)
    {
        if (!is_null($authorizedAmount) && (strlen($authorizedAmount) > 15)) {
            throw new \InvalidArgumentException('invalid length for $authorizedAmount when calling InlineResponse2002OrderInformationAmountDetails., must be smaller than or equal to 15.');
        }

        $this->container['authorizedAmount'] = $authorizedAmount;

        return $this;
    }

    /**
     * Gets totalAmount
     * @return string
     */
    public function getTotalAmount()
    {
        return $this->container['totalAmount'];
    }

    /**
     * Sets totalAmount
     * @param string $totalAmount Grand total for the order. You can include a decimal point (.), but no other special characters. CyberSource truncates the amount to the correct number of decimal places.  * CTV, FDCCompass, Paymentech (<= 12)  For processor-specific information, see the grand_total_amount field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     * @return $this
     */
    public function setTotalAmount($totalAmount)
    {
        if (!is_null($totalAmount) && (strlen($totalAmount) > 19)) {
            throw new \InvalidArgumentException('invalid length for $totalAmount when calling InlineResponse2002OrderInformationAmountDetails., must be smaller than or equal to 19.');
        }

        $this->container['totalAmount'] = $totalAmount;

        return $this;
    }

    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param string $currency Currency used for the order. Use the three-character ISO Standard Currency Codes.  For an authorization reversal or a capture, you must use the same currency that you used in your request for Payment API.
     * @return $this
     */
    public function setCurrency($currency)
    {
        if (!is_null($currency) && (strlen($currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling InlineResponse2002OrderInformationAmountDetails., must be smaller than or equal to 3.');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets discountAmount
     * @return string
     */
    public function getDiscountAmount()
    {
        return $this->container['discountAmount'];
    }

    /**
     * Sets discountAmount
     * @param string $discountAmount Total discount amount applied to the order.  For processor-specific information, see the order_discount_amount field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     * @return $this
     */
    public function setDiscountAmount($discountAmount)
    {
        if (!is_null($discountAmount) && (strlen($discountAmount) > 15)) {
            throw new \InvalidArgumentException('invalid length for $discountAmount when calling InlineResponse2002OrderInformationAmountDetails., must be smaller than or equal to 15.');
        }

        $this->container['discountAmount'] = $discountAmount;

        return $this;
    }

    /**
     * Gets dutyAmount
     * @return string
     */
    public function getDutyAmount()
    {
        return $this->container['dutyAmount'];
    }

    /**
     * Sets dutyAmount
     * @param string $dutyAmount Total charges for any import or export duties included in the order.  For processor-specific information, see the duty_amount field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     * @return $this
     */
    public function setDutyAmount($dutyAmount)
    {
        if (!is_null($dutyAmount) && (strlen($dutyAmount) > 15)) {
            throw new \InvalidArgumentException('invalid length for $dutyAmount when calling InlineResponse2002OrderInformationAmountDetails., must be smaller than or equal to 15.');
        }

        $this->container['dutyAmount'] = $dutyAmount;

        return $this;
    }

    /**
     * Gets taxAmount
     * @return string
     */
    public function getTaxAmount()
    {
        return $this->container['taxAmount'];
    }

    /**
     * Sets taxAmount
     * @param string $taxAmount Total tax amount for all the items in the order.  For processor-specific information, see the total_tax_amount field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     * @return $this
     */
    public function setTaxAmount($taxAmount)
    {
        if (!is_null($taxAmount) && (strlen($taxAmount) > 12)) {
            throw new \InvalidArgumentException('invalid length for $taxAmount when calling InlineResponse2002OrderInformationAmountDetails., must be smaller than or equal to 12.');
        }

        $this->container['taxAmount'] = $taxAmount;

        return $this;
    }

    /**
     * Gets nationalTaxIncluded
     * @return string
     */
    public function getNationalTaxIncluded()
    {
        return $this->container['nationalTaxIncluded'];
    }

    /**
     * Sets nationalTaxIncluded
     * @param string $nationalTaxIncluded Flag that indicates whether a national tax is included in the order total.  Possible values:   - **0**: national tax not included  - **1**: national tax included  For processor-specific information, see the national_tax_indicator field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     * @return $this
     */
    public function setNationalTaxIncluded($nationalTaxIncluded)
    {
        if (!is_null($nationalTaxIncluded) && (strlen($nationalTaxIncluded) > 1)) {
            throw new \InvalidArgumentException('invalid length for $nationalTaxIncluded when calling InlineResponse2002OrderInformationAmountDetails., must be smaller than or equal to 1.');
        }

        $this->container['nationalTaxIncluded'] = $nationalTaxIncluded;

        return $this;
    }

    /**
     * Gets freightAmount
     * @return string
     */
    public function getFreightAmount()
    {
        return $this->container['freightAmount'];
    }

    /**
     * Sets freightAmount
     * @param string $freightAmount Total freight or shipping and handling charges for the order. When you include this field in your request, you must also include the **totalAmount** field.  For processor-specific information, see the freight_amount field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     * @return $this
     */
    public function setFreightAmount($freightAmount)
    {
        if (!is_null($freightAmount) && (strlen($freightAmount) > 13)) {
            throw new \InvalidArgumentException('invalid length for $freightAmount when calling InlineResponse2002OrderInformationAmountDetails., must be smaller than or equal to 13.');
        }

        $this->container['freightAmount'] = $freightAmount;

        return $this;
    }

    /**
     * Gets taxDetails
     * @return \CyberSource\Model\V2paymentsOrderInformationAmountDetailsTaxDetails[]
     */
    public function getTaxDetails()
    {
        return $this->container['taxDetails'];
    }

    /**
     * Sets taxDetails
     * @param \CyberSource\Model\V2paymentsOrderInformationAmountDetailsTaxDetails[] $taxDetails
     * @return $this
     */
    public function setTaxDetails($taxDetails)
    {
        $this->container['taxDetails'] = $taxDetails;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


